# https://www.lynda.com/Bash-tutorials/Up-Running-Bash-Scripting/142989-2.html

$ head file_name.txt => returns first paragraph of file
$ tail file_name.txt => returns last paragraph of file 
$ more file_name.txt => returns paginated file 

# brace expansion
$ touch file_name{1..100} => creates file_name1 file_name2 ... file_name100
$ echo {1..10} => 1 2 3 4 ... 10
$ echo {1..10..2} => 1 3 5 7 9
$ echo {a..z} => a b c ... x y z

# see how many files are in directory
$ ls -l | wc -l => returns a number

$ ~-/ represents directory you were just in 

awk
cut
sed

# creating a script
$ nano script.sh
    1 #!/bin/bash
    2 #what this script does
$ chmod +x script.sh (this makes the script executable)
$ ./script.sh # to execute script

# variables
# no spaces between variable and value (on either side of =)
# call variables with $ in front of it
# you can include variables in strings
a='hello john'
echo 'good morning, $a'

# adding attributes
declare -i d=123 # declaring d is an integer
declare -r e=456 # e is read-only (cannot be modified)
declare -l g='Hello' # f = hello 
declare -u p='Hello' # p = HELLO 

echo ... 
$HOME returns home directory
$PWD returns current directory
$MACHTYPE returns machine type
$HOSTNAME returns system name
$BASH_VERSION returns version of bash
$SECONDS 
    in CLI returns the num of seconds the bash program has been running
    in script it starts counting seconds since script started
$0 contains name of the script

# command substitution (in nano)
d=$(pwd)
echo $d # prints working directory    

# numbers
# need to wrap numbers in parentheses with a $ like $((math)) otherwise treats numbers as strings
# math only works with integers not floats
d=2
e=$((d=2))
echo $e 
((e++))
((e+=9))

# comparisons [[expression goes here]] & returns 0 for true and 1 for false
[['cat' == 'cat']] 
echo $? => returns 0
[['cat' == 'dog']]
echo $? => returns 1

# for numbers
less than = -lt 
greater than = -gt 
less than or equal to = -le 
greater than or equal to = -ge 
equal = -eq 
not equal = -ne 
[[20 -gt 100]]
echo $? => returns 1

and && or || not !
a=''
b='hi'
-z = null
-n = not null
[[-z $a && -n $b]]
echo $? => 0